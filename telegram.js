// server.js

require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3000;
const TELEGRAM_API = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`;

// ---------------------------------------------
// 1) –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
async function sendMessageWithButton(chatId, text) {
  return axios.post(`${TELEGRAM_API}/sendMessage`, {
    chat_id: chatId,
    text,
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'mark_read' }
        ]
      ]
    },
    parse_mode: 'Markdown'
  });
}

// 2) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback_query (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –≤ Telegram)
async function answerCallback(callbackQueryId) {
  return axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
    callback_query_id: callbackQueryId
  });
}

// 3) –£–¥–∞–ª–µ–Ω–∏–µ inline-–∫–Ω–æ–ø–æ–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
async function removeInlineKeyboard(chatId, messageId) {
  return axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: { inline_keyboard: [] }
  });
}

// ---------------------------------------------
// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.post('/send-to-telegram', async (req, res) => {
  const { name, contact, message } = req.body;
  const fullMessage =
    `üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*\n` +
    `üë§ *–ò–º—è:* ${name}\n` +
    `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${contact}\n` +
    `üïí *–ü–æ–∂–µ–ª–∞–Ω–∏—è:* ${message}`;

  try {
    await sendMessageWithButton(process.env.TELEGRAM_CHAT_ID, fullMessage);
    res.status(200).send('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error.response?.data || error.message);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

// ---------------------------------------------
// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫
app.post('/webhook', async (req, res) => {
  const update = req.body;

  if (update.callback_query) {
    const { id: callbackQueryId, data, message } = update.callback_query;
    const chatId = message.chat.id;
    const messageId = message.message_id;

    if (data === 'mark_read') {
      try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await answerCallback(callbackQueryId);
        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
        await removeInlineKeyboard(chatId, messageId);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:', err.response?.data || err.message);
      }
    }
  }

  // Telegram —Ç—Ä–µ–±—É–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å 200 OK
  res.sendStatus(200);
});

// ---------------------------------------------
// (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø–æ URL
async function setupWebhook() {
  if (!process.env.WEBHOOK_URL) {
    console.log('WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook');
    return;
  }
  try {
    await axios.post(`${TELEGRAM_API}/setWebhook`, {
      url: `${process.env.WEBHOOK_URL}/webhook`
    });
    console.log('Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:', `${process.env.WEBHOOK_URL}/webhook`);
  } catch (err) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook:', err.response?.data || err.message);
  }
}

// ---------------------------------------------
app.listen(port, async () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${port}`);
  await setupWebhook();
});
